# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "test-publish" ]
  #    branches: [ "main" ]
  pull_request:
    branches: [ "test-publish" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest,ubuntu-22.04-arm, windows-latest, macos-latest,macos-13 ]
    #            os: [ macos-latest ]
    #        os: [ubuntu-latest,ubuntu-22.04-arm, windows-latest, windows-11-arm,macos-latest,macos-13]
    name: build  ${{ matrix.os }}


    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Print JAVA_HOME
        run: echo "JAVA_HOME=$JAVA_HOME"

      - name: Install WiX Toolset via Chocolatey
        if: startsWith(matrix.os, 'windows')
        shell: cmd
        run: choco install -y innosetup wixtoolset

      - name: Check PATH and WiX/Inno Setup installation
        if: startsWith(matrix.os, 'windows')
        shell: powershell
        run: |
          Write-Host "Checking PATH..."
          echo $env:PATH
          
          Write-Host "Testing candle (WiX)..."
          try {
            Get-Command candle -ErrorAction Stop
            Write-Host "WiX Toolset is available."
          } catch {
            Write-Host "WiX Toolset NOT found in PATH!"
          }
          
          Write-Host "Testing iscc (Inno Setup)..."
          try {
            Get-Command iscc -ErrorAction Stop
            Write-Host "Inno Setup is available."
          } catch {
            Write-Host "Inno Setup NOT found in PATH!"
          }


      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml


        # 新增构建产物收集步骤
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}-${{ github.run_number }}
          path: |
            **/target/*.zip
            **/target/*.rpm
            **/target/*.dep
            **/target/*.gz
            **/target/*.msi
            **/target/*.exe
            **/target/*dependencies.jar
             **/target/*.dmg
          #          **/target/*.msm
          #          **/target/*.*
          if-no-files-found: error


  release-publish:
    env:
      RELEASE_TAG: v2.3.16.1
    runs-on: ubuntu-latest
    needs: build  # 依赖build job完成
    if: github.ref == 'refs/heads/test-publish'  # 仅在release分支上执行
    permissions:
      contents: write
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Process and Rename Artifacts
        run: |
          # 创建发布目录
          mkdir -p ./release-assets

          # 获取版本号，去除前缀'v'
          VERSION=${RELEASE_TAG#v}

          # 启用递归glob匹配
          shopt -s globstar

          # 遍历下载的构件
          for artifact_dir in ./artifacts/*; do
            if [ -d "$artifact_dir" ]; then
              # 获取目录名并确定平台类型
              dir_name=$(basename "$artifact_dir")

              # 根据目录名确定平台标识
              if [[ "$dir_name" == *"ubuntu"* ]]; then
                if [[ "$dir_name" == *"arm"* ]]; then
                  platform="linux-arm64"
                else
                  platform="linux-x86_64"
                fi
              elif [[ "$dir_name" == *"macos"* ]]; then
                if [[ "$dir_name" == *"latest"* ]] || [[ "$dir_name" == *"arm"* ]]; then
                  platform="macos-arm64"
                else
                  platform="macos-x86_64"
                fi
              elif [[ "$dir_name" == *"windows"* ]]; then
                platform="windows-x86_64"
              else
                platform="unknown"
              fi

              # 解压构件
              unzip -q "$artifact_dir/*.zip" -d ./temp || true
              mkdir -p ./temp
              cp -r "$artifact_dir"/* ./temp/ || true
              echo "Files in temp directory:"
              file_count=0

              # 使用globstar递归查找所有文件
              for file in ./temp/**; do
                if [ -f "$file" ]; then
                  file_count=$((file_count+1))
                  # 获取文件扩展名
                  extension="${file##*.}"
                  # 构造新文件名
                  new_name="rdm-ui-$VERSION-$platform.$extension"
                  # 移动并重命名文件
                  mv "$file" "./release-assets/$new_name" || true
                  echo "Moved $file to ./release-assets/$new_name"
                fi
              done
              echo "Processed $file_count files for platform $platform"

              # 清理临时目录
              rm -rf ./temp
            fi
          done
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: ${{ env.RELEASE_TAG }}🌈
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          files: ./release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}








